#+title: LearnOpenGL notes
#+DESCRIPTION: Notes I take refering to the learnopengl.com website
#+AUTHOR: Lui Sant'Ana Cardoso

* TODO shit to get done [1/3] [33%]
- [-] write notes on shaders (hello triangle)
  - [X] shader types
  - [X] Graphics Pipeline
  - [ ] NDC (Normalized Device Coordinates)
- [X] write shaders (hello triangle)
- [ ] write shaders (shadertoy default)

* Linux Specific:
** Compilation:
- "For Linux users compiling with GCC, the following command line options may help you compile the project: -lglfw3 -lGL -lX11 -lpthread -lXrandr -lXi -ldl. Not correctly linking the corresponding libraries will generate many undefined reference errors."

** OpenGL version:
#+begin_src bash
glxinfo | grep -i "version"
#+end_src

* GLAD:
** GLAD retrieves OpenGL functions from the current host OS, so that we don't have to do that manually. If we did it manually it would look something like this:
#+begin_src cpp
// define the function's prototype
typedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);
// find the function and assign it to a function pointer
GL_GENBUFFERS glGenBuffers  = (GL_GENBUFFERS)wglGetProcAddress("glGenBuffers");
// function can now be called as normal
unsigned int buffer;
glGenBuffers(1, &buffer);
#+end_src

** Initialize GLAD
*** GLAD manages function pointers for OpenGL, so it has to be initialized before we call any OpenGL functions:
#+begin_src cpp
if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)){
    std::cout << "Failed to initialize GLAD" << "\n";
    return -1;
}
#+end_src

** Set glViewport
*** glViewport tells OpenGL the size of the rendering window so it knows how we want to display the data and coordinates with respect to the window.
#+begin_src cpp
glViewport(0, 0, width, height);
#+end_src
**** glViewport's dimensions can be set to values smaller than GLFW's dimensions, which would allow us to display other elements outside of the OpenGL viewport.

*** Update the viewport when window gets resized by user:
#+begin_src cpp

void framebuffer_size_callback(GLFWwindow* window, int width, int height){
    glViewport(0, 0, width, height);
}
#+end_src
**** then call framebuffer_size_callback from main:
#+begin_src cpp
glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
#+end_src

* GLFW:
** Initialize GLFW:
*** We first initialize GLFW
#+begin_src cpp
glfwInit();
#+end_src

*** We then set the version of OpenGL with
 #+begin_src cpp
glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
 #+end_src

*** We then set the OpenGl profile to the core profile with
 #+begin_src cpp
glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
 #+end_src

** Create window object:
*** Window object holds all the windowing data (width, height, title) ignore the other parameters
 #+begin_src cpp
GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
 #+end_src

*** Tell GLFW to make the context of our window the main context on the current thread:
  #+begin_src cpp
glfwMakeContextCurrent(window);
  #+end_src

** Keep drawing window for as long as it is not closed
#+begin_src cpp
while(!glfwWindowShouldClose(window)){
    glfwSwapBuffers(window);
    glfwPollEvents();
}
#+end_src
** Get input
*** Create a function to check the return value of glfwGetKey()
#+begin_src cpp
void process_input(GLFWwindow* window){
    if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS){
        glfwSetWindowShouldClose(window, true);
    }
}
#+end_src
**** Note: glfwGetKey() returns GLFW_RELEASE if the key is not pressed
*** Then call it every iteration of the render loop (a frame):
#+begin_src cpp
while(!glfwWindowShouldClose(window)){
    process_input(window);

    glfwSwapBuffers(window);
    glfwPollEvents();
    }
#+end_src
* Rendering
** ONE FRAME = ONE ITERATION OF THE RENDER LOOP

** OpenGL rendering pipeline (refer to pipeline.png)
*** VertexData[] -> Vertex Shader -> Shape Assembly -> Geometry Shader -> Rasterization -> Fragment Shader -> Tests and Blending
**** We can insert our own shaders at 3 different stages: Vertex Shader, Geometry Shader, and Fragment shader. A vertex shader and a fragment shader are demanded by OpenGL to render almost anything. A Geometry Shader is optional.

** Main render loop
*** Clear the screen with a color at the start of every frame to get rid of the results of the previous frame
#+begin_src cpp
glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
glClear(GL_COLOR_BUFFER_BIT);
#+end_src
**** There are 3 possible buffer bits that can be cleared with glClear():
+ GL_COLOR_BUFFER_BIT
+ GL_DEPTH_BUFFER_BIT
+ GL_STENCIL_BUFFER_BIT

* Shaders
** Vertex Shader
*** The vertex shader takes as input a single vertex. It mainly transforms the 3D coordinates it receives as input into Normalized Device Coordinates (NDC) and it allows us to do some basic processing of the vertex attributes
*** VBO
**** Vertex Buffer Objects can store a large number of vertices in the GPU's memory. It is usually used as a way to send vertex data to the vertex shader
**** Generate a VBO
#+begin_src cpp
unsigned int VBO;
glGenBuffers(1, &VBO);
#+end_src
***** Then bind the generated buffer to GL_ARRAY_BUFFER
#+begin_src cpp
glBindBuffer(GL_ARRAY_BUFFER, VBO);
#+end_src
***** From now on any GL_ARRAY_BUFFER buffer calls we make will be used to configure the currently bound buffer, which is VBO
**** Send data through the VBO
#+begin_src cpp
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
#+end_src
***** First parameter: type of buffer we want to copy data into
***** Second parameter: size of the data in bytes that we want to pass to the buffer
***** Third parameter: actual data we want to send
***** Fourth parameter: how we want the graphics card to manage the given data
+ GL_STREAM_DRAW: the data is set only once and used by the GPU at most a few times.
+ GL_STATIC_DRAW: the data is set only once and used many times.
+ GL_DYNAMIC_DRAW: the data is changed a lot and used many times.
*** GLSL
**** Very basic vertex shader:
#+begin_src glsl
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
    gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
}
#+end_src
** Geometry Shader
** Fragment Shader
*** The fragment shader is where all the advanced OpenGL effects occur. Its main task is to calculate the final color of a pixel. It usually contains data about the scene such as lights, shadows, colors of the lights etc and it uses that to calculate the final color of the pixel.

* Off-topic:
** Create shortcuts to directories with:
#+begin_src bash
sudo ln -s /path/to/folder /path/to/shortcut
#+end_src
